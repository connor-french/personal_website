{"title":"Interactively explore geographic data in R using leaflet","markdown":{"yaml":{"title":"Interactively explore geographic data in R using leaflet","author":"Connor French","description":"A short tutorial of how to use the leaflet R package to create an interactive map.","date":"2019-11-20","aliases":["../leaflet-tutorial/"],"categories":["Research","Tutorial","GCDI","GIS"],"image":"featured.png"},"headingText":"Why leaflet?","containsRefs":false,"markdown":"\n\n[Originally published on GC Digital Initiatives](https://digitalfellows.commons.gc.cuny.edu/2019/11/21/interactively-explore-geographic-data-in-r-using-leaflet/)\n\n\nMaking a data visualization interactive opens up a host of opportunities for new insights. This is especially true for geographic data. While a static map is preferable for publication in a journal or a book, an interactive map is suitable for exploring data or packing more information in an accessible format. Patterns may emerge when viewing data at different scales or when toggling through features.\n\nThere are a number of tools for building interactive maps. [Leaflet](https://leafletjs.com/) is one of the most popular open-source JavaScript libraries for creating interactive maps. The [leaflet R package](https://rstudio.github.io/leaflet/) is a high-level interface that makes it easy to create beautiful interactive maps in a few lines of code. Using R rather than point-and-click software like [ArcMap](http://desktop.arcgis.com/en/arcmap/) and others makes your life easier through reproducible code that can be shared for others to recreate your map or that you can return to when you inevitably need to fix something. I use leaflet regularly for data exploration and for sharing preliminary results with collaborators. You can also include leaflet maps in [RMarkdown](https://rmarkdown.rstudio.com/) documents, [Shiny](https://shiny.rstudio.com/) apps, and even post them to your website!\n\n### Goal of the tutorial\n\nThe goal of this tutorial is to provide you with a basic understanding of leaflet functionality and the tools and resources to make your own interactive maps. You will:\n\n1.  Read in geographic data for plotting\n\n2.  Plot locations of interest using markers\n\n3.  Color locations according to a factor\n\n4.  Include pop-up text that provides metadata about the locations of interest\n\n### Installation\n\nYou will need to install four packages for this tutorial. The [dplyr]{style=\"color:red\"} package for data manipulation, the [sf]{style=\"color:red\"} package for handling spatial data, the [rgbif]{style=\"color:red\"} package for acquiring the data, and finally the [leaflet]{style=\"color:red\"} package for mapping. All packages are available on CRAN.\n\n```{r eval=FALSE}\npackages <- c(\"dplyr\", \"sf\", \"rgbif\", \"leaflet\")\ninstall.packages(packages, dependencies = TRUE)\n```\n\nNow that the packages are installed, you need to load them into your environment.\n\n```{r collapse=TRUE, warning=FALSE, message=FALSE}\nlibrary(dplyr)\nlibrary(sf)\nlibrary(rgbif)\nlibrary(leaflet)\n```\n\n### Read in and pre-process data\n\nThe data you're going to work with are some locations where rain frogs, genus *Breviceps* (aka [the cute grumpy frog](https://www.youtube.com/watch?v=cBkWhkAZ9ds)), have been found. Using the [rgbif]{style=\"color:red\"} package, you're querying the large [Global Biodiversity Information Repository](https://www.gbif.org/) to obtain the species occurrences. After obtaining the data, some filtering is necessary. First, you're filtering out observations that do not have latitude or longitude coordinates ([hasCoordinate = TRUE]{style=\"color:gray\"}) and selecting only the relevant columns for your visualization ([select()]{style=\"color:gray\"}). Then, you're converting the data frame that [rgbif]{style=\"color:red\"} returns into a simple features ([sf]{style=\"color:red\"}) data frame that contains information about which columns to use as coordinates ([coords = ...]{style=\"color:gray\"}) and what the data's coordinate reference system is ([crs = ...]{style=\"color:gray\"}).\n\nIf the **%\\>%** bit is confusing, don't worry- I'll explain in the next section.\n\n![source: allthatsinteresting.com](https://allthatsinteresting.com/wordpress/wp-content/uploads/2019/04/desert-rain-frog.png){alt=\"source: allthatsinteresting.com\" width=\"50%\"}\n\n```{r}\nfrog_gbif <- occ_search(\n  genusKey = 3240854,\n  hasCoordinate = TRUE,\n  limit = 100\n  ) %>% \n  .[[\"data\"]] %>%\n  select(\n    genus,\n    species,\n    family, \n    eventDate, \n    decimalLongitude, \n    decimalLatitude\n    ) %>% \n  st_as_sf(\n    coords = c(\"decimalLongitude\", \"decimalLatitude\"),\n    crs = \"+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs\"\n    )\n\n```\n\n### Plot a basic map\n\nPlotting a basic map only takes three lines of code! The necessary steps to make a leaflet map are:\n\n1.  **Initialize a map widget** using the [leaflet()]{style=\"color:gray\"} function.\n\n2.  **Add layers** using the suite of commands the begin with [add\\*()]{style=\"color:gray\"}, e.g. [addTiles()]{style=\"color:gray\"}, which added the OpenStreetMap tiles and [addMarkers()]{style=\"color:gray\"}, which added our locality data\n\n3.  **Print the result**. In this case I'm printing the map to the console without assigning it to a variable first.\n\nThe **%\\>%** (pipe) operator is used to make code easier to read and help the mapmaking process flow organically. It pipes the output of one function into the input of the next. Intuitively, you can think of the following code as \"I initialize the map widget *and then* add the basemap tiles *and then* add the locality markers.\"\n\n```{r}\nleaflet() %>%\n  addTiles() %>%  # Add default OpenStreetMap map tiles\n  addMarkers(data = frog_gbif)\n```\n\nThis is nice and all, but there's more you can do to make the visualization informative and appealing.\n\n### Customization\n\nNow you're going to add some pizazz to the map. You're going to color the labels according to the species and add some popup text with information about the family the individual belongs to, its species name, and the date it was collected. In addition, you're going to use addCircleMarkers instead of addMarkers to use circles instead of flags. Finally, you're adding a legend so the colors make sense.\n\nDetailed explanations of what each function is doing are provided as code comments.\n\n```{r}\n# First, a color palette needs to be set. We're using the viridis palette, but feel free to explore the options available! I set the domain to NULL because I think it's more flexible to have a general color palette that can be attributed to factors later.\npal <- colorFactor(palette = \"viridis\", domain = NULL)\n  \n# This is the text that will go into the popup labels! The popup argument accepts html input, so I'm using \"<br>\" to indicate line breaks. I'd recommend printing this to your console so you can see what the popup argument will be parsing.\npopup_label <- paste(\n  \"Family:\", frog_gbif$family, \"<br>\", \n  \"Species:\", frog_gbif$species, \"<br>\",\n  \"Date Collected:\", frog_gbif$eventDate\n  )\n\n\nleaflet() %>%\n  addTiles() %>%\n  # You're adding circle markers here. In addition, we're specifying the color and popup labels for the markers. The tilde (~) is telling the color argument to accept the output of the pal object, which is now returning colors mapped to each species. Other plotting software like ggplot don't require a tilde to map to factors or numbers, so this may look foreign, but leaflet does and it just takes a little getting used to.\n  addCircleMarkers(data = frog_gbif,\n                   color = ~pal(species),\n                   popup = popup_label) %>%\n  # We're specifying the legend to be in the bottom left of the map. Colors are specified a little differently here. The \"pal\" argument specifies the palette being used and the \"values\" argument specifies the values to map to. We're using the tilde here so it knows that you're mapping to a factor. \n  addLegend(\n    data = frog_gbif,\n    \"bottomleft\", \n    pal = pal,\n    values = ~species,\n    opacity = .9,\n    title = \"Species\"\n  )\n\n```\n\nAnd there you have it! This is just the tip of the iceberg with what leaflet can do. You can plot polygons, lines, rasters, icons, and more with only a little more code.\n\n### Go further\n\nHere are some more resources to learn more about leaflet and general GIS in R.\n\n[leaflet documentation](https://rstudio.github.io/leaflet/)\n\n[A more involved tutorial](https://www.earthdatascience.org/courses/earth-analytics/get-data-using-apis/leaflet-r/) that shows off some more leaflet features.\n\n[Geocomputation in R](https://bookdown.org/robinlovelace/geocompr/) free, online book. It's a wonderful resource for GIS in R.\n\n[Making static maps in R](https://www.r-spatial.org/r/2018/10/25/ggplot2-sf.html) with sf and ggplot2.\n","srcMarkdownNoYaml":"\n\n[Originally published on GC Digital Initiatives](https://digitalfellows.commons.gc.cuny.edu/2019/11/21/interactively-explore-geographic-data-in-r-using-leaflet/)\n\n### Why leaflet?\n\nMaking a data visualization interactive opens up a host of opportunities for new insights. This is especially true for geographic data. While a static map is preferable for publication in a journal or a book, an interactive map is suitable for exploring data or packing more information in an accessible format. Patterns may emerge when viewing data at different scales or when toggling through features.\n\nThere are a number of tools for building interactive maps. [Leaflet](https://leafletjs.com/) is one of the most popular open-source JavaScript libraries for creating interactive maps. The [leaflet R package](https://rstudio.github.io/leaflet/) is a high-level interface that makes it easy to create beautiful interactive maps in a few lines of code. Using R rather than point-and-click software like [ArcMap](http://desktop.arcgis.com/en/arcmap/) and others makes your life easier through reproducible code that can be shared for others to recreate your map or that you can return to when you inevitably need to fix something. I use leaflet regularly for data exploration and for sharing preliminary results with collaborators. You can also include leaflet maps in [RMarkdown](https://rmarkdown.rstudio.com/) documents, [Shiny](https://shiny.rstudio.com/) apps, and even post them to your website!\n\n### Goal of the tutorial\n\nThe goal of this tutorial is to provide you with a basic understanding of leaflet functionality and the tools and resources to make your own interactive maps. You will:\n\n1.  Read in geographic data for plotting\n\n2.  Plot locations of interest using markers\n\n3.  Color locations according to a factor\n\n4.  Include pop-up text that provides metadata about the locations of interest\n\n### Installation\n\nYou will need to install four packages for this tutorial. The [dplyr]{style=\"color:red\"} package for data manipulation, the [sf]{style=\"color:red\"} package for handling spatial data, the [rgbif]{style=\"color:red\"} package for acquiring the data, and finally the [leaflet]{style=\"color:red\"} package for mapping. All packages are available on CRAN.\n\n```{r eval=FALSE}\npackages <- c(\"dplyr\", \"sf\", \"rgbif\", \"leaflet\")\ninstall.packages(packages, dependencies = TRUE)\n```\n\nNow that the packages are installed, you need to load them into your environment.\n\n```{r collapse=TRUE, warning=FALSE, message=FALSE}\nlibrary(dplyr)\nlibrary(sf)\nlibrary(rgbif)\nlibrary(leaflet)\n```\n\n### Read in and pre-process data\n\nThe data you're going to work with are some locations where rain frogs, genus *Breviceps* (aka [the cute grumpy frog](https://www.youtube.com/watch?v=cBkWhkAZ9ds)), have been found. Using the [rgbif]{style=\"color:red\"} package, you're querying the large [Global Biodiversity Information Repository](https://www.gbif.org/) to obtain the species occurrences. After obtaining the data, some filtering is necessary. First, you're filtering out observations that do not have latitude or longitude coordinates ([hasCoordinate = TRUE]{style=\"color:gray\"}) and selecting only the relevant columns for your visualization ([select()]{style=\"color:gray\"}). Then, you're converting the data frame that [rgbif]{style=\"color:red\"} returns into a simple features ([sf]{style=\"color:red\"}) data frame that contains information about which columns to use as coordinates ([coords = ...]{style=\"color:gray\"}) and what the data's coordinate reference system is ([crs = ...]{style=\"color:gray\"}).\n\nIf the **%\\>%** bit is confusing, don't worry- I'll explain in the next section.\n\n![source: allthatsinteresting.com](https://allthatsinteresting.com/wordpress/wp-content/uploads/2019/04/desert-rain-frog.png){alt=\"source: allthatsinteresting.com\" width=\"50%\"}\n\n```{r}\nfrog_gbif <- occ_search(\n  genusKey = 3240854,\n  hasCoordinate = TRUE,\n  limit = 100\n  ) %>% \n  .[[\"data\"]] %>%\n  select(\n    genus,\n    species,\n    family, \n    eventDate, \n    decimalLongitude, \n    decimalLatitude\n    ) %>% \n  st_as_sf(\n    coords = c(\"decimalLongitude\", \"decimalLatitude\"),\n    crs = \"+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs\"\n    )\n\n```\n\n### Plot a basic map\n\nPlotting a basic map only takes three lines of code! The necessary steps to make a leaflet map are:\n\n1.  **Initialize a map widget** using the [leaflet()]{style=\"color:gray\"} function.\n\n2.  **Add layers** using the suite of commands the begin with [add\\*()]{style=\"color:gray\"}, e.g. [addTiles()]{style=\"color:gray\"}, which added the OpenStreetMap tiles and [addMarkers()]{style=\"color:gray\"}, which added our locality data\n\n3.  **Print the result**. In this case I'm printing the map to the console without assigning it to a variable first.\n\nThe **%\\>%** (pipe) operator is used to make code easier to read and help the mapmaking process flow organically. It pipes the output of one function into the input of the next. Intuitively, you can think of the following code as \"I initialize the map widget *and then* add the basemap tiles *and then* add the locality markers.\"\n\n```{r}\nleaflet() %>%\n  addTiles() %>%  # Add default OpenStreetMap map tiles\n  addMarkers(data = frog_gbif)\n```\n\nThis is nice and all, but there's more you can do to make the visualization informative and appealing.\n\n### Customization\n\nNow you're going to add some pizazz to the map. You're going to color the labels according to the species and add some popup text with information about the family the individual belongs to, its species name, and the date it was collected. In addition, you're going to use addCircleMarkers instead of addMarkers to use circles instead of flags. Finally, you're adding a legend so the colors make sense.\n\nDetailed explanations of what each function is doing are provided as code comments.\n\n```{r}\n# First, a color palette needs to be set. We're using the viridis palette, but feel free to explore the options available! I set the domain to NULL because I think it's more flexible to have a general color palette that can be attributed to factors later.\npal <- colorFactor(palette = \"viridis\", domain = NULL)\n  \n# This is the text that will go into the popup labels! The popup argument accepts html input, so I'm using \"<br>\" to indicate line breaks. I'd recommend printing this to your console so you can see what the popup argument will be parsing.\npopup_label <- paste(\n  \"Family:\", frog_gbif$family, \"<br>\", \n  \"Species:\", frog_gbif$species, \"<br>\",\n  \"Date Collected:\", frog_gbif$eventDate\n  )\n\n\nleaflet() %>%\n  addTiles() %>%\n  # You're adding circle markers here. In addition, we're specifying the color and popup labels for the markers. The tilde (~) is telling the color argument to accept the output of the pal object, which is now returning colors mapped to each species. Other plotting software like ggplot don't require a tilde to map to factors or numbers, so this may look foreign, but leaflet does and it just takes a little getting used to.\n  addCircleMarkers(data = frog_gbif,\n                   color = ~pal(species),\n                   popup = popup_label) %>%\n  # We're specifying the legend to be in the bottom left of the map. Colors are specified a little differently here. The \"pal\" argument specifies the palette being used and the \"values\" argument specifies the values to map to. We're using the tilde here so it knows that you're mapping to a factor. \n  addLegend(\n    data = frog_gbif,\n    \"bottomleft\", \n    pal = pal,\n    values = ~species,\n    opacity = .9,\n    title = \"Species\"\n  )\n\n```\n\nAnd there you have it! This is just the tip of the iceberg with what leaflet can do. You can plot polygons, lines, rasters, icons, and more with only a little more code.\n\n### Go further\n\nHere are some more resources to learn more about leaflet and general GIS in R.\n\n[leaflet documentation](https://rstudio.github.io/leaflet/)\n\n[A more involved tutorial](https://www.earthdatascience.org/courses/earth-analytics/get-data-using-apis/leaflet-r/) that shows off some more leaflet features.\n\n[Geocomputation in R](https://bookdown.org/robinlovelace/geocompr/) free, online book. It's a wonderful resource for GIS in R.\n\n[Making static maps in R](https://www.r-spatial.org/r/2018/10/25/ggplot2-sf.html) with sf and ggplot2.\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":"auto","echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"message":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../styles.css"],"toc":true,"toc-depth":3,"output-file":"index.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.4.549","editor":"visual","theme":{"light":"minty","dark":"cyborg"},"title-block-banner":true,"toc-title":"Table of contents","toc-location":"left","page-layout":"article","citation":true,"comments":{"utterances":{"repo":"connor-french/connorfrench"}},"title":"Interactively explore geographic data in R using leaflet","author":"Connor French","description":"A short tutorial of how to use the leaflet R package to create an interactive map.","date":"2019-11-20","aliases":["../leaflet-tutorial/"],"categories":["Research","Tutorial","GCDI","GIS"],"image":"featured.png"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}